<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dbugr</title>
    <description>Dbugr is built on Jekyll, which is optimized for speed and readability.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 09 Jan 2023 09:04:28 +0530</pubDate>
    <lastBuildDate>Mon, 09 Jan 2023 09:04:28 +0530</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>

    
      <item>
        <title>Sorting Algorithms</title>
        <description>&lt;p&gt;There are many different sorting algorithms that can be used to arrange data in a specific order.&lt;/p&gt;

&lt;h5 id=&quot;what-is-time-complexity&quot;&gt;What is time complexity?&lt;/h5&gt;

&lt;p&gt;The time complexity of a sorting algorithm refers to the amount of time it takes to sort a list of a given size.&lt;/p&gt;

&lt;h5 id=&quot;what-is-space-complexity&quot;&gt;What is space complexity?&lt;/h5&gt;

&lt;p&gt;The space complexity refers to the amount of additional memory space that the algorithm requires to perform the sort.&lt;/p&gt;

&lt;p&gt;Some common sorting algorithms with their respective time and space complexities:&lt;/p&gt;

&lt;h5 id=&quot;bubble-sort&quot;&gt;Bubble sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm compares adjacent elements and swaps them if they are in the wrong order.
It repeats this process until the list is sorted.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n^2)&lt;br /&gt;
Space complexity: O(1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;selection-sort&quot;&gt;Selection sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm selects the smallest element in the list and swaps it with the first element.
It then selects the second smallest element and swaps it with the second element, and so on, until the list is sorted.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n^2)&lt;br /&gt;
Space complexity: O(1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;insertion-sort&quot;&gt;Insertion sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm starts with the second element in the list and compares it to the first element.
If the second element is smaller, it is swapped with the first element. The algorithm then compares the third element to the first and second elements, and swaps it with the appropriate element. This process continues until the list is sorted.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n^2)&lt;br /&gt;
Space complexity: O(1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;merge-sort&quot;&gt;Merge sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm divides the list into two smaller lists, sorts each of these lists, and then merges the two sorted lists back together.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n*log(n))&lt;br /&gt;
Space complexity: O(n)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;quick-sort&quot;&gt;Quick sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm selects a “pivot” element and rearranges the list so that all elements less than the pivot are placed before it and all elements greater than the pivot are placed after it.
The algorithm then repeats this process on the sublists to the left and right of the pivot until the list is sorted.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n*log(n))&lt;br /&gt;
Space complexity: O(log(n))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;heap-sort&quot;&gt;Heap sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm uses a data structure called a heap to sort the list.
It first builds a heap from the list, and then repeatedly removes the largest element from the heap and adds it to the sorted list until the heap is empty.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n*log(n))&lt;br /&gt;
Space complexity: O(1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;counting-sort&quot;&gt;Counting sort:&lt;/h5&gt;

&lt;p&gt;How it works?&lt;br /&gt;
This algorithm works by counting the number of occurrences of each unique element in the list and using this information to determine the position of each element in the sorted list.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time complexity: O(n+k) where k is the number of unique elements in the list&lt;br /&gt;
Space complexity: O(k)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are just a few examples of the many different sorting algorithms that are available. Each algorithm has its own strengths and weaknesses, and the choice of which algorithm to use will depend on the specific requirements of the problem at hand.&lt;/p&gt;

&lt;p&gt;About complexity:&lt;br /&gt;
The time complexity of a sorting algorithm is typically expressed using big O notation, which gives an upper bound on the number of steps the algorithm takes to complete. For example, an algorithm with a time complexity of O(n^2) will take no more than a quadratic number of steps to sort a list of size n. The space complexity is typically expressed in terms of the size of the input list.
It’s important to note that these time and space complexities are based on the worst-case scenarios for each algorithm. In practice, some algorithms may perform better than their worst-case complexities would suggest, depending on the specific input data.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Dec 2022 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/sorting/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/sorting/</guid>
      </item>
    
      <item>
        <title>Troubleshooting based on Kepner-Tregoe approach</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to isolate issues based on Kepner-Tregoe approach&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Issue Type : Error / No Error
(Issues can be classified into issue with error where the error needs to be resolved or an issue where we do not have an error message.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Issues where we have an error while performing something would need investigating and isolation by collecting relevant data with following format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define the Problem:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Intermittent or Constant error&lt;/li&gt;
  &lt;li&gt;Get Organization URL&lt;/li&gt;
  &lt;li&gt;Get error timestamp in UTC or local time of user and convert to UTC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can the problem be reproduced?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Does this happen on other machines or other environments like a different organization or different browser?&lt;/li&gt;
  &lt;li&gt;Approval for support instance for online organization&lt;/li&gt;
  &lt;li&gt;Approval for Database copy for On-Premise instances&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What makes the problem worse or better?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When did the issue start happening?&lt;/li&gt;
  &lt;li&gt;How many users are impacted?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s changed or new?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What was done before the issue start happening?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can I reduce the complexity?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Has someone else already solved this problem?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Do Google Search with the exact error message in Unify Global Search and Internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Document the work: screenshots, logs, etc.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Capture exact error message including the entire error stack.&lt;/li&gt;
  &lt;li&gt;Document the Kusto Query and Results/Verbose error logs&lt;/li&gt;
  &lt;li&gt;Capture exact steps to reproduce the issue in environment from the moment or logging into the organization&lt;/li&gt;
  &lt;li&gt;Get Problem Steps Recorder or video recording of the issue&lt;/li&gt;
  &lt;li&gt;Get Fiddler trace or console error logs from browser as HAR file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;No Error:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If there is no error to fix either the logging is not proper&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What is exact ask? (could be advisory)&lt;/li&gt;
  &lt;li&gt;Are they referring some article?&lt;/li&gt;
  &lt;li&gt;Is the issue related to D365 CE?&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 10 Dec 2022 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/case-flow/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/case-flow/</guid>
      </item>
    
      <item>
        <title>Issue Documentation Template</title>
        <description>&lt;h3 id=&quot;environment-information&quot;&gt;Environment Information&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Online/OnPrem:&lt;/li&gt;
  &lt;li&gt;Org URL:&lt;/li&gt;
  &lt;li&gt;Version:&lt;/li&gt;
  &lt;li&gt;Base Language:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;issue-description&quot;&gt;Issue Description&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Description:&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Detailed Repro Steps:&lt;/li&gt;
  &lt;li&gt;Time Stamp/ActivityIDs: Error messages:&lt;/li&gt;
  &lt;li&gt;Screen shots attached to case:&lt;/li&gt;
  &lt;li&gt;Affected users:&lt;/li&gt;
  &lt;li&gt;Does this happen on test/vanilla org?&lt;/li&gt;
  &lt;li&gt;Troubleshooting attempted so far:&lt;/li&gt;
  &lt;li&gt;Research:&lt;/li&gt;
  &lt;li&gt;Kusto Query/Jarvis Link:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Contact Primary Contact listed on case? (if no, please define next contact)&lt;/p&gt;

&lt;h3 id=&quot;next-actions&quot;&gt;Next Actions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Next action on Engineer:&lt;/li&gt;
  &lt;li&gt;Next action on Customer:&lt;/li&gt;
  &lt;li&gt;Next contact agreement:&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 09 Dec 2022 00:00:00 +0530</pubDate>
        <link>http://localhost:4000/blog/documentation/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/documentation/</guid>
      </item>
    

    
      
        
      
    
      
    
      
        
          <item>
            <title></title>
            <description>&lt;h3&gt;   &lt;/h3&gt;

&lt;div id=&quot;categories&quot;&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#documentation&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/documentation&quot;&gt;documentation&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;documentation&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/documentation/&quot;&gt;Issue Documentation Template&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#troubleshooting&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/troubleshooting&quot;&gt;troubleshooting&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;troubleshooting&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/case-flow/&quot;&gt;Troubleshooting based on Kepner-Tregoe approach&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

  &lt;div class=&quot;category-box&quot;&gt;
    
    &lt;div id=&quot;#DSA&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;/blog/categories/DSA&quot;&gt;DSA&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;DSA&quot;&gt;&lt;/a&gt;
     
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6&gt;&lt;a href=&quot;/blog/sorting/&quot;&gt;Sorting Algorithms&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    

  &lt;/div&gt;

&lt;/div&gt;

</description>
            <link>http://localhost:4000/blog/categories/</link>
          </item>
        
      
    
      
    
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.guides %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/guides/</link>
          </item>
        
      
    
      
    
      
    
      
        
          <item>
            <title>Get Started</title>
            <description>## Getting Started - How to use “Dbugr” theme

## What&apos;s Jekyll ?

If you aren’t familiar with Jekyll yet, you should know that it is a static site generator. It will transform your plain text into static websites and blogs. No more databases, slow loading websites, risk of being hacked…just your content. And not only that, with Jekyll you get free hosting with GitHub Pages! If you are a beginner we recommend you start with [Jekyll’s Docs](https://jekyllrb.com/docs/installation/). Now, if you know how to use Jekyll, let’s move on to using this theme in Jekyll:

### Steps to create your blog using devlopr-jekyll and Host using Github Pages :

&gt;  **Step 1.**  Fork the repo - [click here](https://github.com/abpanic/devlopr-jekyll/fork)

![Dbugr Jekyll Repo](/assets/img/posts/fork1.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 2.** Use **your-github-username.github.io** as the new repo  ( Replace your-github-username with yours). Remember if you use the name other than your-github-username.github.io , your blog will be built using gh-pages branch.

![Dbugr Jekyll Repo](/assets/img/posts/fork2.PNG){:class=&quot;img-fluid&quot;}

![Dbugr Jekyll Repo](/assets/img/posts/fork3.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 3.** Clone the new repo locally to make changes :

![Dbugr Jekyll Repo](/assets/img/posts/fork31.PNG){:class=&quot;img-fluid&quot;}

![Dbugr Jekyll Repo](/assets/img/posts/fork32.PNG){:class=&quot;img-fluid&quot;}

![Dbugr Jekyll Repo](/assets/img/posts/fork33.PNG){:class=&quot;img-fluid&quot;}

```bash
 $ git clone https://github.com/yourusername/yourusername.github.io
 $ cd yourusername.github.io
 $ code .
```

&gt; **Step 4.** Open the files using VSCode and edit _config.yml and edit with your details:

- _config.yml file - replace with your own details
- _posts - Add your blog posts here
- _includes - You can replace the contents of the files with your data. (contains widgets)
- _assets/img - Add all your images here

![Dbugr Jekyll Repo](/assets/img/posts/fork34.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 5** - Install the development requirements:

### Set up local development environment

1. [Git](https://git-scm.com/)
2. [Ruby](https://www.ruby-lang.org/) and [Bundler](https://bundler.io/)
3. [VSCode](https://code.visualstudio.com/download)

We need ruby and bundler to build our site locally. After installation check if its working:

For ruby :

```bash
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]
```
For bundler :

```bash
$ gem install bundler
$ bundler -v
Bundler version 2.2.29
```
Add jekyll :

```bash
$ bundle update
$ bundle add jekyll
```
 This command will add the Jekyll gem to our Gemfile and install it to the ./vendor/bundle/ folder.

You can check the jekyll version

```
$ bundle exec jekyll -v
jekyll 4.2.0
```

&gt; **Step 6.** Install the gem dependencies by running the following command

```bash
$ bundle update
$ bundle install
```

&gt; **Step 7.** Serve the site locally by running the following command below:

```bash
$ bundle exec jekyll serve --watch
```
or you can also serve using :

```bash
$ jekyll serve
```

Visit [http://localhost:4000](http://localhost:4000) for development server

![Dbugr Jekyll Repo](/assets/img/posts/fork41.PNG){:class=&quot;img-fluid&quot;}


### Adding Content

Start populating your blog by adding your .md files in _posts. devlopr-jekyll already has a few examples.

#### YAML Post Example:

```yml
---
layout: post
title: Sample Post
author: Sujay Kundu
date: &apos;2019-05-21 14:35:23 +0530&apos;
category:
        - jekyll
summary: This is the summary for the sample post
thumbnail: sample.png
---

Hi ! This is sample post.

```

#### YAML Page Example:

```yml
---
layout: page
title: Sample Page
permalink: /sample-page/
---

Hi ! This is sample page.
```

#### Editing stylesheet

You’ll only work with a single file to edit/add theme style: assets/css/main.scss.

### Deploy your Changes

Once happy with your blog changes. Push your changes to master branch.

&gt; **Step 8.** Push Your Local Changes

```bash
 $ git add .
 $ git commit -m &quot;my new blog using devlopr-jekyll&quot;
 $ git push origin master
```

Visit your Github Repo settings ! Enable master branch as Github Pages Branch :

![Dbugr Jekyll Repo](/assets/img/posts/fork6.PNG){:class=&quot;img-fluid&quot;}

&gt; **Step 9.** Deploy your Blog :

![Dbugr Jekyll Repo](/assets/img/posts/fork7.PNG){:class=&quot;img-fluid&quot;}

&gt; Congrats ! On your new shining Blog !

You can visit the blog using [http://your-github-username.github.io](http://your-github-username.github.io).

</description>
            <link>http://localhost:4000/get-started/</link>
          </item>
        
      
    
      
        
          <item>
            <title>Jekyll</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.jekyll %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/jekyll/</link>
          </item>
        
      
    
      
    
      
        
          <item>
            <title>Guides</title>
            <description>&lt;h5&gt; Posts by Category : {{ page.title }} &lt;/h5&gt;

&lt;div class=&quot;card&quot;&gt;
{% for post in site.categories.troubleshooting %}
 &lt;li class=&quot;category-posts&quot;&gt;&lt;span&gt;{{ post.date | date_to_string }}&lt;/span&gt; &amp;nbsp; &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt;
{% endfor %}
&lt;/div&gt;</description>
            <link>http://localhost:4000/blog/categories/troubleshooting/</link>
          </item>
        
      
    
      
    
      
    

  </channel>
</rss>